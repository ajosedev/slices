{"ast":null,"code":"var _jsxFileName = \"/Users/andrew/pdev/json-cms/components/Helpers.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Heading from './Heading';\nimport Text from './Text';\nexport const componentMap = {\n  heading: Heading,\n  text: Text\n};\n/**\n * Converts ACF field data to React props for a component\n * Should only be necessary if the data returned from GraphQL doesn't match the component props\n * @param {String} componentName - name of the ACF component\n * @param {String} rawFields - JSON string of fields in the ACF component\n */\n// const propMapper = (componentName, fields) => {\n//   switch (componentName) {\n//     case 'text':\n//       return {\n//         children: fields.text,\n//       };\n//     default:\n//       return fields;\n//   }\n// };\n\nexport const renderComponent = (_ref) => {\n  let {\n    component\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"component\"]);\n\n  const comp = component.toLowerCase(); // const props = propMapper(comp, rest);\n\n  const Component = componentMap[comp];\n\n  if (!Component) {\n    throw new Error(`No component found for ${comp}`);\n  }\n\n  return __jsx(Component, _extends({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n};\nrenderComponent.propTypes = {\n  component: Object.keys(componentMap).isRequired\n};\nexport default renderComponent;","map":{"version":3,"sources":["/Users/andrew/pdev/json-cms/components/Helpers.jsx"],"names":["React","Heading","Text","componentMap","heading","text","renderComponent","component","props","comp","toLowerCase","Component","Error","propTypes","Object","keys","isRequired"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAEH,OADiB;AAE1BI,EAAAA,IAAI,EAAEH;AAFoB,CAArB;AAKP;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMI,eAAe,GAAG,UAA6B;AAAA,MAA5B;AAAEC,IAAAA;AAAF,GAA4B;AAAA,MAAZC,KAAY;;AAC1D,QAAMC,IAAI,GAAGF,SAAS,CAACG,WAAV,EAAb,CAD0D,CAE1D;;AAEA,QAAMC,SAAS,GAAGR,YAAY,CAACM,IAAD,CAA9B;;AAEA,MAAI,CAACE,SAAL,EAAgB;AACd,UAAM,IAAIC,KAAJ,CAAW,0BAAyBH,IAAK,EAAzC,CAAN;AACD;;AAED,SAAO,MAAC,SAAD,eAAeD,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAXM;AAaPF,eAAe,CAACO,SAAhB,GAA4B;AAC1BN,EAAAA,SAAS,EAAEO,MAAM,CAACC,IAAP,CAAYZ,YAAZ,EAA0Ba;AADX,CAA5B;AAIA,eAAeV,eAAf","sourcesContent":["import React from 'react';\n\nimport Heading from './Heading';\nimport Text from './Text';\n\nexport const componentMap = {\n  heading: Heading,\n  text: Text,\n};\n\n/**\n * Converts ACF field data to React props for a component\n * Should only be necessary if the data returned from GraphQL doesn't match the component props\n * @param {String} componentName - name of the ACF component\n * @param {String} rawFields - JSON string of fields in the ACF component\n */\n// const propMapper = (componentName, fields) => {\n//   switch (componentName) {\n//     case 'text':\n//       return {\n//         children: fields.text,\n//       };\n\n//     default:\n//       return fields;\n//   }\n// };\n\nexport const renderComponent = ({ component, ...props }) => {\n  const comp = component.toLowerCase();\n  // const props = propMapper(comp, rest);\n\n  const Component = componentMap[comp];\n\n  if (!Component) {\n    throw new Error(`No component found for ${comp}`);\n  }\n\n  return <Component {...props} />;\n};\n\nrenderComponent.propTypes = {\n  component: Object.keys(componentMap).isRequired,\n};\n\nexport default renderComponent;\n"]},"metadata":{},"sourceType":"module"}